#!/usr/bin/env perl

use strict;
use warnings;

package NgxBrew;

our $VERSION = '0.01';

use Getopt::Long;
use File::Path qw/rmtree/;

our $NGXBREW_ROOT = $ENV{'NGXBREW_ROOT'} || $ENV{'HOME'} . '/.ngxbrew';
our $NGXBREW_REMOTELIST = 'http://nginx.org/download';
our $NGXBREW_SOURCE = "https://raw.github.com/nyarla/ngxbrew/master/ngxbrew";

sub new {
    my ( $class, @argv ) = @_;

    my $command = shift @argv;
    my @args    = @argv;

    my $self    = bless {
        command => $command,
        args    => [ @args ],
        ua      => NgxBrew::UA->new,
    }, $class;

    $self->init();

    return $self;
}

sub init {
    my $self = shift;

    my $root = $NGXBREW_ROOT;

    $self->{'root_dir'}   = $root;
    $self->{'bin_dir'}    = "${root}/bin";
    $self->{'nginx_dir'}  = "${root}/nginxes";
    $self->{'module_dir'} = "${root}/modules";
    $self->{'dist_dir'}   = "${root}/dists";

    return $self;
}

sub run {
    my $self = shift;

    my $command = $self->{'command'} || q{};
    my $args    = $self->{'args'};

    $command =~ s{-}{_}g;
    my $ret;

    if ( my $action = $self->can("run_command_${command}") ) {
        $ret = $action->( $self, $args );
    }
    else {
        $self->run_command_help($args);
        exit 1;
    }

    return $ret
}

sub run_command_use {
    my ( $self, $args ) = @_;

    my $nginx_dir = $self->{'nginx_dir'};
    my $bindir    = $self->{'bin_dir'};
    my $name      = $args->[0];

    if ( ! defined $name ) {
        print "required installed name.\n";
        return 0;
    }

    if ( ! -d "${nginx_dir}/${name}" ) {
        print "name (${name}) is not installed.\n";
        return 0;
    }
    else {
        my $from = "${nginx_dir}/${name}/sbin/nginx";
        my $to   = "${bindir}/nginx";

        my $brew = $self->{'root_dir'} . "/ngxbrew";

        unlink $to if ( -l $to );
        symlink $from, $to;
        symlink $brew, "${bindir}/ngxbrew" if ( ! -l "${bindir}/ngxbrew" );
        
        print "use ${name}\n";

        return 1;
    }
}

sub run_command_install {
    my ( $self, $args ) = @_;

    local @ARGV = @{ $args };

    my $version = shift @ARGV;
    my $name    = shift @ARGV;

    if ( ! defined $version ) {
        print "required version\n";
        return 0;
    }

    if ( ! defined $name ) {
        print "required name\n";
        return 0;
    }

    if ( ! grep { $version eq $_ } @{ $self->get_remote_version } ) {
        print "${version} not found\n";
        return 0;
    }

    if ( -e "$self->{'nginx_dir'}/${version}" ) {
        print "${version} is already installed\n";
        return 0;
    }

    my $url = "${NGXBREW_REMOTELIST}/nginx-${version}.tar.gz";

    if ( ! $self->{'ua'}->getable($url) ) {
        print "${version} is not found\n";
        return 0;
    }

    my $src_path = $self->{'dist_dir'} . "/nginx-${version}";
    if ( ! -d $src_path ) {
        $self->run_command_clean([$version]);

        print "fetch: ${url}\n";
        $self->{'ua'}->dl(
            $url,
            $self->{'dist_dir'} . "/nginx-${version}.tar.gz"
        ) or die "download is failed: ${url}";

        system qq{ cd "$self->{'dist_dir'}" &&
                   tar zxvf "nginx-${version}.tar.gz" };
    }
    else {
        print "Using before installed cache\n\n";
    }

    my @enables   = ();
    my @disables  = ();
    my @modules   = ();
    my $configure = q{};

    GetOptions(
        "enable=s"    => \@enables,
        "disable=s"   => \@disables,
        "modules=s"   => \@modules,
        "configure=s" => \$configure,
        );

    Getopt::Long::Configure(qw/pass_through bundling/);

    @enables  = split m{\s*,\s*}, join(q{,}, @enables);
    @disables = split m{\s*,\s*}, join(q{,}, @disables);
    @modules  = split m{\s*,\s*}, join(q{,}, @modules);

    my $options = q{};

    # prefix
    $options .= qq{--prefix="@{[ $self->{'nginx_dir'} . '/' . $name ]}" };

    if ( @enables ) {
        $options .= "--with-${_}_module " for @enables;
    }

    if ( @disables ) {
        $options .= "--witout-${_}_module " for @disables;
    }

    if ( @modules ) {
        $options .= qq[--add-module="$self->{'module_dir'}/${_}" ] for @modules
    }

    if ( $configure ne q{} ) {
        $options .= $configure;
    }

    return system qq{
        cd "${src_path}" &&
        ./configure ${options} &&
        make &&
        make install
    };
}

sub run_command_uninstall {
    my ( $self, $args ) = @_;

    my $name   = $args->[0];
    my $target = $self->{'nginx_dir'} . '/' . $name;
    my $current = $self->get_current_nginx;

    if ( ! -e $target ) {
        print "name (${name}) is not installed\n";
        return 0;
    }

    rmtree $target;

    if ( $current eq $name ) {
        unlink $self->{'bin_dir'} . '/nginx';
    }

    print "name (${name}) is uninstalled\n";
}

sub run_command_buildargs {
    my ( $self, $args ) = @_;

    my $name = $args->[0];
       $name = $self->get_current_nginx if ( ! defined $name );

    my $nginx = $self->{'nginx_dir'} . "/${name}/sbin/nginx";

    print "Installed nginx (${name})\n";
    print "=========================\n";
    return system($nginx, '-V');
}

sub run_command_ls {
    my ( $self, $args ) = @_;
    return $self->run_command_list($args);
}

sub run_command_list {
    my ( $self, $args ) = @_;
    my @nginxes = ();

    opendir( my $dh, $self->{'nginx_dir'} )
        or die "Cannot open nginx dir:" .  $self->{'nginx_dir'} . " : ${!}";

    while ( my $file = readdir($dh) ) {
        next if ( $file =~ m{^\.} );

        my $name = $file;
        $name =~ s{^$self->{'nginx_dir'}/}{};
        $name =~ s{^/*|/*$}{}g;

        push @nginxes, $name;
    }

    close($dh);
    
    print scalar(@nginxes)
        ? join(qq{\n}, @nginxes)
        : 'nginx is not installed';

    print "\n\ncurrent: " . $self->get_current_nginx . "\n";

    return 1;
}

sub run_command_ls_remote {
    my ( $self, $args ) = @_;

    my $versions = sort_version($self->get_remote_version);
    my $i = 0;
    my %tmp;

    for my $version ( @{ $versions } ) {
        my ( $v1, $v2, $v3 ) = split m{\.}, $version;

        if ( ! $tmp{"${v1}.${v2}"}++ ) {
            print "\n\n" if ( $i );
            $i = 0;
        }

        print $version;
        print ++$i % 8 == 0 ? "\n" : ' ' x ( 8 - length $version );
    }

    print "\n";
}

sub run_command_clean {
    my ( $self, $args ) = @_;

    my $version = $args->[0];
    
    if ( $version eq 'all' ) {
        opendir( my $dh, $self->{'dist_dir'} )
            or die "Cannot open distdir: ${!}";
        
        while ( my $file = readdir $dh ) {
            next if ( $file =~ m{^\.} );
            my $path = $self->{'dist_dir'} . "/${file}";

            unlink $path if ( -f $path );
            rmtree $path if ( -d $path );
        }

        print "clean all\n";
        return 1;
    }
    elsif (    -e $self->{'dist_dir'} . "/nginx-${version}.tar.gz"
            || -e $self->{'dist_dir'} . "/nginx-${version}") {
        unlink $self->{'dist_dir'} . "/nginx-${version}.tar.gz";
        rmtree $self->{'dist_dir'} . "/nginx-${version}";

        print "clean ${version}\n";
    }
    else {
        print "${version} is already cleaned\n";
        return 0;
    }
}

sub run_command_setup {
    my ( $self, $args ) = @_;

    $self->setup_path();
    $self->setup_brew();

    my $rootdir = $self->{'root_dir'};

    print <<"...";
Install ngxbrew in ${rootdir}
========================================================
Add path:
    export PATH=${rootdir}/bin:\$PATH
========================================================
NOTE:
--------------------------------------------------------
if you set NGXBREW_ROOT env value on your shell,
You should write NGXBREW_ROOT env value on your dotfiles
...

    return 1;
}


sub run_command_help {
    my ( $self, $args ) = @_;

    print <<'__HELP__';
ngxbrew $VERSION

Usage:
    ngxbrew help
    ngxbrew version

    ngxbrew install <version> <name>
    ngxbrew uninstall <name>

    ngxbrew use <name>

    ngxbrew list
    ngxbrew ls
    ngxbrew ls-remote

    ngxbrew clean <version> | all
   
    ngxbrew selfupdate

Example:
    ngxbrew install 1.2.1 default \
        --enable="http_dav_module" \
        --modules="ngx_dav_ext_module"

    ngxbrew use default
__HELP__
}

sub run_command_version {
    my ( $self, $command ) = @_;

    print "ngxbrew version ${VERSION}\n";
    return 1;
}

sub run_command_selfupdate {
    my ( $self, $args ) = @_;

    $self->setup_brew();
    print "update successfull\n";

    return 1;
}

sub get_remote_version {
    my ( $self ) = @_;

    my $html     = $self->{'ua'}->get("${NGXBREW_REMOTELIST}/");
    my @versions = ();
    my %tmp;
    while ( $html =~ m{nginx-(\d\.\d\.\d)\.tar\.gz}g ) {
        my $ver = $1;
        push @versions, $ver unless( $tmp{$ver}++ );
    }
    
    return \@versions;
}

sub setup_path {
    my $self = shift;

    for my $target (qw/ root_dir bin_dir nginx_dir module_dir dist_dir /) {
        if ( ! -d $self->{$target} ) {
            local $!;
            my $RETVAL = system(qw/ mkdir -p /, $self->{$target});
            if ( $RETVAL != 0 ) {
                die "Failed to mkdir: " . $self->{$target} .  ": ${!}"; 
            }
        }
    }

    return 1;
}

sub setup_brew {
    my $self = shift;

    print "fetching ngxbrew...\n";
    
    my $root_dir    = $self->{'root_dir'};
    my $bindir      = $self->{'bin_dir'};

    my $brew_source = $self->{'ua'}->get($NGXBREW_SOURCE);
    my $brew_path   = $self->{'root_dir'} . '/ngxbrew';

    open( my $fh, '>', $brew_path )
        or die "Cannot open file: ${brew_path}: ${!}";
    print $fh $brew_source;
    close($fh);

    `chmod +x ${brew_path}`;

    if ( ! -l "${bindir}/ngxbrew" ) {
        symlink $brew_path, "${bindir}/ngxbrew";
    }

    return 1;
}

sub get_current_nginx {
    my $self = shift;
    my $link = $self->{'bin_dir'} . '/nginx';

    return 'none' if ( ! -l $link );

    my $realpath  = readlink $link;
    my ($version) = ( $realpath =~ m{^$self->{'nginx_dir'}/(.+)/sbin/nginx$} );

    return $version || 'none';
}

sub sort_version {
    my $versions = shift;

    return [sort {
        my ( $a1, $a2, $a3 ) = split m{\.}, $a;
        my ( $b1, $b2, $b3 ) = split m{\.}, $b;

        $a1 <=> $b1 || $a2 <=> $b2 || $a3 <=> $b3
    } @{ $versions }];
}

package NgxBrew::UA;

sub new {
    my $class = shift;

    if ( `which curl` ) {
        return NgxBrew::UA::curl->new;
    }
    elsif ( `which wget` ) {
        return NgxBrew::UA::wget->new;
    }
    else {
        die "curl or wget is required\n";
    }
}

package NgxBrew::UA::curl;

sub new { bless {}, shift }

sub getable {
    my ( $self, $url ) = @_;
    `curl -Is "${url}"` =~ m{200 OK};
}

sub get {
    my ( $self, $url ) = @_;
    return `curl -s "${url}"`;
}

sub dl {
    my ( $self, $url, $path ) = @_;
    return system(qw/curl -C - --progress-bar/, $url, '-o', $path) == 0;
}

package NgxBrew::UA::wget;

sub new { bless {}, shift }

sub getable {
    my ( $self, $url ) = @_;
    return `wget -Sq --dpider "${url} 2>&1"` =~ m{200 OK};
}

sub get {
    my ( $self, $url ) = @_;
    return `wget -q "${url}" -O -`;
}

sub dl {
    my ( $self, $url, $path ) = @_;
    return system(qw/ wget -c /, $url, '-O', $path) == 0;
}

package main;

( NgxBrew->new(@ARGV)->run ) ? exit 0 : exit 1;
